inserting new docs into collection via atlas
insert document button
shows a window with ways to input things
every mongodb document has an unique _id value (of type ObjectId() by default, but if you are guaranteed a different unique thing, that can be used instead), and will be autogenerated even if its not specified
you should not have all different or all same data for the mongodb documents (meaning keep titles the same, but try to make values different)
you can change the data type of the mongodb doc entry

via the shell
db.<collections>.findOne() can be used to get a random entry
db.<collections>.insert(<json entry>) can be used to insert an entry into the collection
there are mongodb schema validation functionality to enforce correct document typings

via the shell, but multiple documents at a time:
db.<collections>.insert([<json entries separated by comma>]) can be used to insert multiple documents
inserting multiple will go down the array one by one and crash out if an error is detected, but you can pass the {"ordered": false} param outside of the array in order to ensure that the ones that are faulty do not crash the rest out
if you insert into a nonexistent collection or database, then the collection (and potentially the database) will be created automatically
if you use a nonexistent database, it will not change anything unless you commit anything to the nonexistent database

updating documents via explorer:
can filter and then press pencil and then make changes in mainly the same manner as when we added a document

via the shell:
updateOne(<json query>, {<operation>: <json query to have operation change by>}) to update a value of a random document fitting in the query using a specified operation
updateMany(<json query>, {<operation>: <json query to have operation change by>}) to update a value of all document fitting in the query using a specified operation

operation possible types:
$inc to increase a value
$set to set a value, even if the value was not even initialized
$push: pushes an element into an array field
their doc is your best friend for this

deleting documents and collections
garbage can button to delete documents, database, and collections
on mongoshell: deleteOne(<json query>) (best when querying with the _id value for data safety reasons) or deleteMany(<json query>) to delete all documents with the matching json query
.drop() can be used in order to delete a collection